// Code generated by protoc-gen-go. DO NOT EDIT.
// source: depot.proto

/*
Package floatingquotes is a generated protocol buffer package.

It is generated from these files:
	depot.proto

It has these top-level messages:
	Quote
	FloatingAverage
	Depot
*/
package floatingquotes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FloatingAverage_AlertState int32

const (
	FloatingAverage_NONE FloatingAverage_AlertState = 0
	FloatingAverage_BUY  FloatingAverage_AlertState = 1
	FloatingAverage_SELL FloatingAverage_AlertState = 2
)

var FloatingAverage_AlertState_name = map[int32]string{
	0: "NONE",
	1: "BUY",
	2: "SELL",
}
var FloatingAverage_AlertState_value = map[string]int32{
	"NONE": 0,
	"BUY":  1,
	"SELL": 2,
}

func (x FloatingAverage_AlertState) String() string {
	return proto.EnumName(FloatingAverage_AlertState_name, int32(x))
}
func (FloatingAverage_AlertState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type Quote struct {
	Value     string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Average   string `protobuf:"bytes,2,opt,name=average" json:"average,omitempty"`
	UpdatedAt int64  `protobuf:"varint,3,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *Quote) Reset()                    { *m = Quote{} }
func (m *Quote) String() string            { return proto.CompactTextString(m) }
func (*Quote) ProtoMessage()               {}
func (*Quote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Quote) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Quote) GetAverage() string {
	if m != nil {
		return m.Average
	}
	return ""
}

func (m *Quote) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type FloatingAverage struct {
	Id                 string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name               string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Symbol             string                     `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
	MaxDaysCap         int32                      `protobuf:"varint,4,opt,name=maxDaysCap" json:"maxDaysCap,omitempty"`
	Quotes             []*Quote                   `protobuf:"bytes,5,rep,name=quotes" json:"quotes,omitempty"`
	DeviationThreshold string                     `protobuf:"bytes,6,opt,name=deviationThreshold" json:"deviationThreshold,omitempty"`
	LatestAverage      string                     `protobuf:"bytes,7,opt,name=latestAverage" json:"latestAverage,omitempty"`
	LatestQuoteValue   string                     `protobuf:"bytes,8,opt,name=latestQuoteValue" json:"latestQuoteValue,omitempty"`
	ClosingDate        int64                      `protobuf:"varint,9,opt,name=closingDate" json:"closingDate,omitempty"`
	AlertState         FloatingAverage_AlertState `protobuf:"varint,10,opt,name=alertState,enum=floatingquotes.FloatingAverage_AlertState" json:"alertState,omitempty"`
}

func (m *FloatingAverage) Reset()                    { *m = FloatingAverage{} }
func (m *FloatingAverage) String() string            { return proto.CompactTextString(m) }
func (*FloatingAverage) ProtoMessage()               {}
func (*FloatingAverage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FloatingAverage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FloatingAverage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FloatingAverage) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *FloatingAverage) GetMaxDaysCap() int32 {
	if m != nil {
		return m.MaxDaysCap
	}
	return 0
}

func (m *FloatingAverage) GetQuotes() []*Quote {
	if m != nil {
		return m.Quotes
	}
	return nil
}

func (m *FloatingAverage) GetDeviationThreshold() string {
	if m != nil {
		return m.DeviationThreshold
	}
	return ""
}

func (m *FloatingAverage) GetLatestAverage() string {
	if m != nil {
		return m.LatestAverage
	}
	return ""
}

func (m *FloatingAverage) GetLatestQuoteValue() string {
	if m != nil {
		return m.LatestQuoteValue
	}
	return ""
}

func (m *FloatingAverage) GetClosingDate() int64 {
	if m != nil {
		return m.ClosingDate
	}
	return 0
}

func (m *FloatingAverage) GetAlertState() FloatingAverage_AlertState {
	if m != nil {
		return m.AlertState
	}
	return FloatingAverage_NONE
}

type Depot struct {
	Id               string             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	FloatingAverages []*FloatingAverage `protobuf:"bytes,2,rep,name=floatingAverages" json:"floatingAverages,omitempty"`
}

func (m *Depot) Reset()                    { *m = Depot{} }
func (m *Depot) String() string            { return proto.CompactTextString(m) }
func (*Depot) ProtoMessage()               {}
func (*Depot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Depot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Depot) GetFloatingAverages() []*FloatingAverage {
	if m != nil {
		return m.FloatingAverages
	}
	return nil
}

func init() {
	proto.RegisterType((*Quote)(nil), "floatingquotes.Quote")
	proto.RegisterType((*FloatingAverage)(nil), "floatingquotes.FloatingAverage")
	proto.RegisterType((*Depot)(nil), "floatingquotes.Depot")
	proto.RegisterEnum("floatingquotes.FloatingAverage_AlertState", FloatingAverage_AlertState_name, FloatingAverage_AlertState_value)
}

func init() { proto.RegisterFile("depot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xdf, 0xae, 0x93, 0x40,
	0x10, 0xc6, 0x05, 0x0a, 0x3d, 0x4c, 0x23, 0x92, 0x89, 0xc7, 0xec, 0x85, 0x51, 0x42, 0x4c, 0xc4,
	0x93, 0xc8, 0xc5, 0xf1, 0x09, 0x5a, 0x7b, 0xbc, 0xd0, 0xa6, 0x2a, 0xb5, 0x26, 0x5e, 0x6e, 0xdd,
	0x2d, 0xdd, 0x48, 0x59, 0x64, 0xb7, 0xd5, 0x3e, 0x99, 0xaf, 0x67, 0x58, 0xa8, 0xfd, 0x67, 0x72,
	0xee, 0x76, 0x7e, 0x33, 0xdf, 0x0c, 0xdf, 0x30, 0x30, 0x60, 0xbc, 0x92, 0x3a, 0xad, 0x6a, 0xa9,
	0x25, 0x06, 0xcb, 0x42, 0x52, 0x2d, 0xca, 0xfc, 0xe7, 0x46, 0x6a, 0xae, 0xe2, 0x39, 0xb8, 0x9f,
	0x9b, 0x17, 0x3e, 0x06, 0x77, 0x4b, 0x8b, 0x0d, 0x27, 0x56, 0x64, 0x25, 0x7e, 0xd6, 0x06, 0x48,
	0xa0, 0x4f, 0xb7, 0xbc, 0xa6, 0x39, 0x27, 0xb6, 0xe1, 0xfb, 0x10, 0x9f, 0x82, 0xbf, 0xa9, 0x18,
	0xd5, 0x9c, 0x0d, 0x35, 0x71, 0x22, 0x2b, 0x71, 0xb2, 0x03, 0x88, 0xff, 0x38, 0xf0, 0xe8, 0x5d,
	0x37, 0x69, 0xd8, 0x29, 0x02, 0xb0, 0x05, 0xeb, 0xda, 0xdb, 0x82, 0x21, 0x42, 0xaf, 0xa4, 0xeb,
	0x7d, 0x63, 0xf3, 0xc6, 0x27, 0xe0, 0xa9, 0xdd, 0x7a, 0x21, 0x0b, 0xd3, 0xd2, 0xcf, 0xba, 0x08,
	0x9f, 0x01, 0xac, 0xe9, 0xef, 0x31, 0xdd, 0xa9, 0xb7, 0xb4, 0x22, 0xbd, 0xc8, 0x4a, 0xdc, 0xec,
	0x88, 0xe0, 0x6b, 0xf0, 0x5a, 0x43, 0xc4, 0x8d, 0x9c, 0x64, 0x70, 0x7b, 0x9d, 0x9e, 0xfa, 0x4c,
	0x8d, 0xc9, 0xac, 0x2b, 0xc2, 0x14, 0x90, 0xf1, 0xad, 0xa0, 0x5a, 0xc8, 0xf2, 0xcb, 0xaa, 0xe6,
	0x6a, 0x25, 0x0b, 0x46, 0x3c, 0x33, 0xf2, 0x3f, 0x19, 0x7c, 0x01, 0x0f, 0x0b, 0xaa, 0xb9, 0xd2,
	0x9d, 0x17, 0xd2, 0x37, 0xa5, 0xa7, 0x10, 0x6f, 0x20, 0x6c, 0x81, 0x19, 0xf6, 0xd5, 0x6c, 0xf3,
	0xca, 0x14, 0x5e, 0x70, 0x8c, 0x60, 0xf0, 0xbd, 0x90, 0x4a, 0x94, 0xf9, 0x98, 0x6a, 0x4e, 0x7c,
	0xb3, 0xc0, 0x63, 0x84, 0xef, 0x01, 0x68, 0xc1, 0x6b, 0x3d, 0xd3, 0x4d, 0x01, 0x44, 0x56, 0x12,
	0xdc, 0xde, 0x9c, 0xdb, 0x3a, 0xdb, 0x71, 0x3a, 0xfc, 0xa7, 0xc8, 0x8e, 0xd4, 0xf1, 0x2b, 0x80,
	0x43, 0x06, 0xaf, 0xa0, 0x37, 0xfd, 0x38, 0xbd, 0x0b, 0x1f, 0x60, 0x1f, 0x9c, 0xd1, 0xfc, 0x5b,
	0x68, 0x35, 0x68, 0x76, 0x37, 0x99, 0x84, 0x76, 0xcc, 0xc0, 0x1d, 0x37, 0xf7, 0x72, 0xf1, 0xbb,
	0x3e, 0x40, 0xb8, 0x3c, 0x9d, 0xa6, 0x88, 0x6d, 0x96, 0xfd, 0xfc, 0x9e, 0xaf, 0xca, 0x2e, 0x84,
	0xa3, 0x97, 0x10, 0xc8, 0x3a, 0x4f, 0x7f, 0x88, 0x5f, 0xa2, 0x3d, 0xcc, 0xd1, 0xf5, 0x99, 0xe8,
	0x53, 0x43, 0xd5, 0xc2, 0x33, 0xd9, 0x37, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x51, 0x3a,
	0x71, 0xc5, 0x02, 0x00, 0x00,
}
